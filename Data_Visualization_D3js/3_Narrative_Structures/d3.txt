1) Chart context
- Charts should have contexts surrounding the data to display
- clear units
- informtive labels
- informative title

2) D3
- will work with D3 (instead if dimple)
- much more flexible
- allows for interaction and animation
- gives you better understanding of what higher level libraries are doing

3) D3 - Declarative API

4) What I want

How do I draw a circle

for 

every row of my data?

5) Imparative Implementation (e.g. in js)
- explicity call out each step
- i.e. how you want it done

for (var row in data) {
  draw("circle", row.val);
}

6) Declarative way

- say what you want 

d3.select('svg')
  .selectAll('circle')
  .data(data)
  .enter()
  .append('circle')

7) .data

- performs a data join (i.e. data bind)
- data argument is [{}, {}, ...] 
- i.e. created by the callback to the function that load data from (remote) file
- each {} in data array represents a row of data ?

8) Thinking with Joins
- Mike Bostock's Thinking with Joins
(http://bost.ocks.org/mike/join/)

9) Aside
- WAT 
- destroy all software
https://www.destroyallsoftware.com/talks/wat
- they have screencasts (every other week) about advanced software topics

10) Break it down

- the selection before the data binding: 	    .selectAll('circle')
- the data join: 				    .data(data)
- the selection after the data binding:		    .enter()
- add cirlce for every element is enter selection:  .append('circle')

- understanding the join and the selections after the join will demistify d3

11) Defining a join
- Joins in SQL on wikipedia
http://en.wikipedia.org/wiki/Join_(SQL)

12) Defining a Join
- has roots in database theory
- union of two tables

13) join example 1
- see join_example_1.jpeg
- match the DepartmentID column (which is common) in both tables (i.e Employee and Department tables)
- employees -> rows in Employee table; departments -> rows in Department table

14) Notes on join
- two employees can be mapped to thesame department
- there could be no employees for a given department
- there could be an employee that does not have a department (i.e. DepartmentID for employee is null)

15) Joins in D3
- Three Little Circles by Mike Bostock
(http://bost.ocks.org/mike/circles/)

- Thinking with Joins by Mike Bostock
(http://bost.ocks.org/mike/join/)

- Binding Data by Scott Murray
(http://alignedleft.com/tutorials/d3/binding-data)

16) More details on joins in D3
- similar to SQL joins
- think of your data file (data.tsv) and the html and svg elements in index.html as the tables in the joins
- so, data.tsv -> Employee table; index.html -> Department table
- so, the join matches every row in data.tsv with a corresponding element in index.html based on some common key (i.e. column) that associates the rows from each table
- in our scatterplot, we are adding circles (i.e. in index.html) based on some common key that the circle
to a row in the data

17) Question about joins
- what happens to rows in the data.tsv that don't have a match to row in index.html (i.e. html/svg elements
(i.e. like John in Employee table with DepartmentID of null)

- what happens to rows in index.html (i.e. html/svg elements) that don't have rows in data.tsv to bind to
(i.e. the marketing department in the Department table)

18) .enter
- the questions raised above are resloved by the special selection .enter
- in d3 there is a concept of a key that matches data to DOM elements on a web page
- for example element i in js data array [{}, {}, ...] maps to element i in after .selectAll selection
- the bindings hold for the duration of the program, unless it is otherwise "deleted" somehow

19) look back at code

d3.select('svg')
  .selectAll('circle')
  .data(data)
  .enter()
  .append('circle')

- the 1st time through our code we have an empty selection after the .selectAll('circle')
- the data bind in .data(data) will bind rows of data.tsv to place holders for circle DOM elements
- think of it as the data bind will create the Departments table with place holder rows
- so, the .enter selection will select these place-holder rows
- and, the .append will put actual circle DOM elements in the place-holder rows

- if you run the code again and there are no changes to the selection or data, nothing will happen
- reason being, since the data never changed, the key of the bound data (i.e. departmentID column) never changed
- the .enter() selection which corresponds to all the new elements to draw on the page will be empty
- so, we don't .append() anything new

- can run the code 100 times, chart won't change if data and selections didn't change
- this is streght of the declarative syntax
- can build animations where only some parts of the chart change from frame to frame

20) D3 joins quiz
- d3.select("svg") - selects a container SVG element on the page
- .selectAll("circle") - creates an empty selection to bind data
- .data(data) - selects all bound data elements not displayed
- .enter() - binds data to the empty selection
- .append("circle") - creates SVG elements for the bound data

21) My Interpretation of the code

d3.select('svg')
  .selectAll('circle')
  .data(data)
  .enter()
  .append('circle')

- select svg element, and inside of it,
- selectAll circles, this will be empty thet 1st time it is called
- bind data rows to previous selected circles (bind key is position)
- there were no previously selected circles so all the data are not yet bound to anything
- .enter means select those data rows that did not bind to DOM elements in index .html
- .enter will return all the data rows
- then bind the data rows returned by enter to new DOM elements

22) Using Venn Diagrams to understand the special selectors (.enter, update, .exit)
- see special_selections.jpeg
- .enter(): selects data rows that are not bound to any html/svg elements
- update: updates the data rows that are bound to html/svg elements
- update is done implicity by leaving out the special selector (e.g. .enter, .exit) after the data bind
- .exit(): html/svg elements currently on the page that are not bound to rows in data.tsv
- .exit() is typically used to remove dom elements from the page

23) From Dimple to D3
- re-interpret chart made earlier with Dimple into D3
- will do this line by line

24) Dimple -> D3: Replace bind data to chart code
- var myChart = new dimple.chart(svg, data);
- in dimple, binds the data to the svg we want to draw the chart in

- equivalent d3 statement:

d3.select('svg')
  .selectAll('circle')
  .data(data)
  .enter()
  .append('circle')

25) What gets returned in all the functions in the d3 data binding chain?
- see data_join_result.JPG

- d3.select('svg'): selection with one element, the empty svg element on the page
- .selectAll('circle'): an empty selection
- .data(data): a selection with placehoder nodes corresponding to each row in data file
- no dom elements are added to the page yet
- .enter() selects all the virtual placeholder nodes that are bound to some data that is not yet shown on the page (i.e. no corresponding dom element)
- .enter() returns a selection of javascript objects, each with a __data__ field which represents a single row of our data file
- .append() returns a selection of svg circles that have field referencing thesame __data__ object from the .enter() selection (i.e. the svg cirlces are bound to the __data__ 

26) Review

.select - returns svg element
.selectAll - return an empty selection
.data - returns placeholder elements for the data row not bound to anything from the selectAll selection
.enter - bind and return placeholder elements to data rows (i.e. modify place holder elements to contain __data__ fields)
.append - transform placeholder elements into actual (viewable) svg cirlce elements with __data__ fields; return them

- final result is that a data row lives as a field of an dom svg element
- STEP THROUGH JAVASCRPT DEBUGGER AND INSPECT WHAT IS RETURNED FROM EACH STATEMENT

27) Some more reference materials

- Mike Bostock's How Selections Work
(http://bost.ocks.org/mike/selection/)

- Ritchie S. King's Visual Storytelling with D3
(http://ritchiesking.com/book/)

The book walks through creating a bar chart with animation and interaction in D3. The bar chart addresses the question, "Is the world getting older?". Said another way, the question investigates whether the distribution of ages tends toward adolescence or adulthood.

28) Dimple -> D3: Replace axis construction code
- axis construction happens in two places, i.e. for the x and y axis

var x = myChart.addTimeAxis("x", "year"); 
myChart.addMeasureAxis("y", "attendance");
x.dateParseFormat = "%Y";
x.tickFormart = "%Y";
x.timeInterval = 4;

- needed to configure x axis more, so that is why we stored a refernce to it in a variable

29) x.dateParseFormat = "%Y";
- by specifiying a parse format, as only the year, for the x axis
- dimple automatically aggregates all the games for a given year and summued up their attendances
- d3 won't do this aggregation automatically, but this behaviour may not be what we want anyways

30) Communicating your message: for world cup data
- take a step back and think of why you are doing what your doing
- the reason for the visualization is to communicate a message
- EDA is HOW you find the message in your data 
- mistakes are ok as you iterate through you design, just backtrack and correct yourself
- message: we are in an increasingly global (and capitalist) age
- as evidenced by teh fact that the attendance is increasing as time increases
- there is a correlation (NOT CAUSATION)
- data visualization helps you communicate your message

31) Using extents for scales
- need to communicate change over time
- use finer granularity
- replace dimple axis construction code with d3 code
- use d3's .extent and .scale functions to convert data values into pixel values
- 1st step = find the "extent" of each of the columns you want to visualize
(i.e. attendance and time columns in data) 

32) Extent function
- .extent function returns a min and a max value based on you data and an accessor function

var time_extent = d3.extent(data, function(d) {
  return d['date'];
});

var count_extent = d3.extent(data, function(d) {
  return d['attendance'];
});

33) Scale function
- now use scale function to map time and attendance values to pixel values

var time_scale = d3.time.scale()
  .range([margin, width])
  .domain(time_extent);

var count_sclae = d3.scale.linear()
  .range([height, margin])
  .domain(count_extent);

- notice the special scale used for time

34) Parsing Data Before the Draw Function
- Remember the date column is represented as a string
- d3 needs to compare the dates to find the extents; but string comparison is different from date comparison
- Need to transform the date strings to date objects before the draw callback is executed

d3.tsv("world_cup_geo.tsv", /* specify date transform */, draw);

- can use d3 date/time formatters - d3.time.format or create native js data/time objects 
(https://github.com/mbostock/d3/wiki/Time-Formatting)
- can do transformation inline, i.e. use the delegate of the extent function
- or do the transform as the data is loaded

d3.tsv("world_cup_geo.tsv", function(d) {
  // transform data
}, draw);

- here d represents a single row in the data file
- the data returned from this function is what gets passed to the call back (i.e. [{}, {}, ...])

35) Understand the d3.tsv transformation function
- say we had:

d3.tsv("world_cup_geo.tsv", function(d) {
  // transform data
  return {
    "i_love": "data_visualization"
  };
}, draw);

- this transforms ever row of our data to the js object: {"i_love": "data_visualization"}
- so, data passed to draw function looks like,
- data = [{"i_love": "data_visualization"}, {"i_love": "data_visualization"}, ...]

36) D3 Parsing Dates and Times

// example datae: 27-05-1934 (16:00 h)
// %blah -> SDRS time variables???
format = d3.time.format("%d-%m-%Y (%H:%M h");

d3.tsv("world_cup_geo.tsv", function(d) {
  // transform data
  d['date'] = format.parse(date['date']);
  d['attendance'] = +d['attendance'];
  return d;
}, draw);

- note we also coerce the attendance string into a number
- note, the format string used to create the format object, tells d3 how our date string is formatted
- that way when d3 ecounters a date string, it knows how to parse it into a date/time object
- kinda like regex matching (format is a regex pattern object)

37) Parsing attendance
- "unary" or "unary plus" operator
- convert string to integer
- the negative unary operator (-) transforms a string representing an integer into a negative integer.

var num = "three";
+num;
// returns NaN

- notice that when the unary operator (+) is used on strings containing alphabetic characters, 
the return value is NaN.

38) Creating Axes
- hard part is creating the proper scales for you axes

var time_axis = d3.svg.axis()
  .scale(time_scale)
  .ticks(d3.time.years, 2);

var count_axis = d3.svg.axis()
  .scale(count_scale)
  .orient('left');

- not customized ticks of time-axis to be every 2 years (could specify days, etc)

39) Now, place axis object on the svg canvas
- the code below gives the axes objects a visual representtion on the screen
- i.e. encodes information into svg elements that the webpage can then display
 
d3.select('svg')
  .append('g')
  .attr('class', 'x axis')
  .attr('transform', 'translate(0,' + height + ')')
  .call(time_axis);

d3.select('svg')
  .append('g')
  .attr('class', 'y axis')
  .attr('transform', 'translate(0,' + margin + ',0)')
  .call(count_axis);

40) .call()
- the D3 call() method allows you to pass a D3 selection to a function, 
- facilitating the function chaining syntax of the rest of the library. 
- in our case it allows us to pass the g selection to the axis function.
(https://github.com/mbostock/d3/wiki/Selections#call)

- For more information on the call() function for axes, 
- read the section Calling the D3.js Axis Function on Dashing D3.
(https://www.dashingd3js.com/d3js-axes)

41) Draw circles on the page
- last step in converting dimple chart -> native d3 chart
- the svg circles are actually already on the page and have data bound to them
- they were appended in the 1st step; i.e. the data binding step
- you don't see them on the webpage because their properies are not defined, i.e. position, radius, fill
- the code below will make them visible

d3.selectAll('circle')
  .attr('cx', function(d) {
    return time_scale(d['date']);
  })
  .attr('cy', function(d) {
    return count_scale(d['attendance']);
  })
  .attr('r', radius)
  .attr('fill', color);

- d is the data bound to this circle, i.e. the thing referenced by the __data__ property of 
object representing this circle svg dom element.

- can change opacity to see overlapping things

43) Pre-attentive processing to highlight home team attendance

- add d3 code to:
- make games with the home country a red circle
- leave all other countries as blue cirlces
- increase the radius of any games for home countries to a radius of 5

- the code to draw/show the circle on the page becomes
d3.selectAll('circle')
  .attr('cx', function(d) {
    return time_scale(d['date']);
  })
  .attr('cy', function(d) {
    return count_scale(d['attendance']);
  })
  .attr('r', function(d) {
    if(d['home'] === d['team1'] || d['home'] === d['team2']) {
      return radius * multiplier;
    }
    else {
      return radius;
    }
  })  
  .attr('fill', function(d) {
    if(d['home'] === d['team1'] || d['home'] === d['team2']) {
      return 'red';
    }
    else {
      return 'blue';
    }
  });

44) Add Legend for context

var legend = svg.append('g')
  .attr('class', 'legend')
  .attr('transform', 'translate(' + (width - 100) + ',' + 20 + ')')
  .selectAll('g')
  .data(['Home Team', 'Others']) // data can be in memory object
  .enter.append('g');

- at this point legend is a selection containing two <g> elements
- need to add text and circles to for each <g> element in the legend selection

45) Add circle and text to the legend

legend.append('circle')
  .attr('cy', function(d, i) {

  })
  .attr('r', function(d) {
    if (d == 'Home Team') {
      return raduis * multiplier;
    }
    else {
      return radius;
    }
  })
  .attr('fill', function(d) {
    if (d == 'Home Team') {
      return 'red';
    }
    else {
      return 'blue';
    }
  });

legend.append('text')
  .attr('y', function(d, i) {
    return i * 30 + 5;
  })
  .attr('x', radius * 5)
  .text(function(d) {
    return d;
  });

- note that some delegates take two arguments
- d: data row, i: index of data row

46) Algining Text
- the x and y properties of text elements define where to start drawing the bottom left of the text.

- a more flexible way to center text is to use the text-anchor and the alignment-baseline properties of the text element.

47) World cup Graphic Summary
- static
- author driven
- beware of biases: data, author, user bias
- consider how the user will interpret/interact with the data